<?php
/**
 * DocumentInstantPaymentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Billingo API v3
 *
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * OpenAPI spec version: 3.0.15
 * Contact: hello@billingo.hu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DocumentInstantPaymentRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentInstantPaymentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentInstantPaymentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'debtor_bank_account' => 'string',
        'different_amount_allowed' => 'bool',
        'update_partner_payment_details' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'debtor_bank_account' => null,
        'different_amount_allowed' => null,
        'update_partner_payment_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'debtor_bank_account' => 'debtor_bank_account',
        'different_amount_allowed' => 'different_amount_allowed',
        'update_partner_payment_details' => 'update_partner_payment_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'debtor_bank_account' => 'setDebtorBankAccount',
        'different_amount_allowed' => 'setDifferentAmountAllowed',
        'update_partner_payment_details' => 'setUpdatePartnerPaymentDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'debtor_bank_account' => 'getDebtorBankAccount',
        'different_amount_allowed' => 'getDifferentAmountAllowed',
        'update_partner_payment_details' => 'getUpdatePartnerPaymentDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['debtor_bank_account'] = isset($data['debtor_bank_account']) ? $data['debtor_bank_account'] : null;
        $this->container['different_amount_allowed'] = isset($data['different_amount_allowed']) ? $data['different_amount_allowed'] : null;
        $this->container['update_partner_payment_details'] = isset($data['update_partner_payment_details']) ? $data['update_partner_payment_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets debtor_bank_account
     *
     * @return string
     */
    public function getDebtorBankAccount()
    {
        return $this->container['debtor_bank_account'];
    }

    /**
     * Sets debtor_bank_account
     *
     * @param string $debtor_bank_account debtor_bank_account
     *
     * @return $this
     */
    public function setDebtorBankAccount($debtor_bank_account)
    {
        $this->container['debtor_bank_account'] = $debtor_bank_account;

        return $this;
    }

    /**
     * Gets different_amount_allowed
     *
     * @return bool
     */
    public function getDifferentAmountAllowed()
    {
        return $this->container['different_amount_allowed'];
    }

    /**
     * Sets different_amount_allowed
     *
     * @param bool $different_amount_allowed different_amount_allowed
     *
     * @return $this
     */
    public function setDifferentAmountAllowed($different_amount_allowed)
    {
        $this->container['different_amount_allowed'] = $different_amount_allowed;

        return $this;
    }

    /**
     * Gets update_partner_payment_details
     *
     * @return bool
     */
    public function getUpdatePartnerPaymentDetails()
    {
        return $this->container['update_partner_payment_details'];
    }

    /**
     * Sets update_partner_payment_details
     *
     * @param bool $update_partner_payment_details update_partner_payment_details
     *
     * @return $this
     */
    public function setUpdatePartnerPaymentDetails($update_partner_payment_details)
    {
        $this->container['update_partner_payment_details'] = $update_partner_payment_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
